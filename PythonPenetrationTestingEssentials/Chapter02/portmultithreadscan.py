import socket
import subprocess
import sys
import threading
from datetime import datetime

subprocess.call("clear", shell=True)


class ScanThread(threading.Thread):
    def __init__(self, threadName, rmip, r1, r2, c):
        threading.Thread.__init__(self)
        self.threadName = threadName
        self.rmip = rmip
        self.r1 = r1
        self.r2 = r2
        self.c = c

    def run(self):
        scantcp(self.threadName, self.rmip, self.r1, self.r2, self.c)


def scantcp(threadName, rmip, r1, r2, c):
    try:
        for port in range(r1, r2):
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            socket.setdefaulttimeout(c)

            result = sock.connect_ex((rmip, port))

            if (result == 0):
                print "Port open --> ", port

            sock.close()
    except KeyboardInterrupt:
        print "Stopping scanner..."
        sys.exit()

    except socket.gaierror:
        print "Hostname could not be resolved"
        sys.exit()

    except socket.error:
        print "could not connect to server"
        sys.exit()


def equalignorecase(a, b):
    try:
        return a.lower() == b.lower()
    except AttributeError:
        return a == b


d = raw_input("Press D for Domain Name or Press I for IP Address: ")

if equalignorecase(d, "d"):
    rmserver = raw_input("Enter the Domain Name to scan: ")
    rmip = socket.gethostbyname(rmserver)
elif equalignorecase(d, "i"):
    rmip = raw_input("Enter the IP Address  to scan: ")
else:
    print "Wrong input"

r11 = int(raw_input("Enter the start port number: "))
r21 = int(raw_input("Enter the last port number: "))
connect = raw_input("For low connectivity press L and High connectivity Press H: ")

if equalignorecase(connect, "l"):
    c = 1.5
elif equalignorecase(connect, "h"):
    c = 0.5
else:
    print "Wrong input"

print "Scanning working on", rmip

start = datetime.now()

tp = r21 - r11
tn = 30  # ports per thread
tnum = tp / tn

if tp % tn != 0:
    tnum += 1

if tnum > 300:
    tn = tp / 300
    tn += 1
    tnum = tp / tn  # number of threads

    if tp % tn != 0:
        tnum += 1

threads = []

try:
    for i in range(tnum):
        r2 = r11 + tn
        thread = ScanThread("T1", rmip, r11, r2, c)
        thread.start()
        threads.append(thread)
        r11 = r2
except:
    print "Error: unable to start thread"

for t in threads:
    t.join()

end = datetime.now()
total = end - start

print "scanning complete in ", total
